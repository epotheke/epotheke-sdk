quarkus.application.name=cardlink-mock

cardlink.mock.accept-all-tans=true

# Logging
%dev.quarkus.log.category."com.epotheke".level=DEBUG
%test.quarkus.log.category."com.epotheke".level=DEBUG

%test.quarkus.log.category."org.jboss.resteasy.reactive.client.logging".level=DEBUG
%test.quarkus.rest-client.logging.scope=request-response

# SpryngSMS
quarkus.rest-client.spryngsms.url=https://rest.spryngsms.com
spryngsms.api-key=${SPRYNGSMS_API_KEY}
spryngsms.enabled=false
%test.spryngsms.api-key=<INSERT_API_KEY>

# WebSockets
# Required to run the websocket methods in a worker thread. This allows them to run blocking tasks, like sending a request to a SMS service.
quarkus.websocket.dispatch-to-worker=true

# Kubernetes
quarkus.kubernetes.env.secrets=cardlink-mock-secret
quarkus.kubernetes.generate-image-pull-secret=true

#quarkus.kubernetes.ingress.host=epotheke.mock.ecsec.services
#quarkus.kubernetes.ingress.expose=true
#quarkus.kubernetes.ingress.tls."tls-cardlink-mock".enabled=true
#quarkus.kubernetes.ingress.annotations."cert-manager.io/cluster-issuer"=letsencrypt-production

# Image Build
quarkus.container-image.builder=jib
quarkus.container-image.registry=private.docker.ecsec.de
quarkus.container-image.group=epotheke
quarkus.container-image.tag=latest-dev
quarkus.container-image.name=${quarkus.application.name}
